From: Debian Java Maintainers <pkg-java-maintainers@lists.alioth.debian.org>
Date: Sun, 11 Aug 2013 10:41:39 +0100
Subject: remove-findbugs

---
 core/src/main/java/hudson/UDPBroadcastThread.java                   | 2 --
 core/src/main/java/hudson/Util.java                                 | 2 --
 core/src/main/java/hudson/WebAppMain.java                           | 1 -
 core/src/main/java/hudson/cli/GroovyshCommand.java                  | 2 --
 core/src/main/java/hudson/logging/LogRecorderManager.java           | 1 -
 core/src/main/java/hudson/triggers/Trigger.java                     | 2 --
 core/src/main/java/hudson/util/PluginServletFilter.java             | 1 -
 core/src/main/java/hudson/util/XStream2.java                        | 2 --
 core/src/main/java/jenkins/model/Jenkins.java                       | 6 ------
 core/src/main/java/jenkins/util/ProgressiveRendering.java           | 1 -
 core/src/test/java/hudson/slaves/ComputerLauncherTest.java          | 2 --
 core/src/test/java/hudson/tasks/junit/SuiteResultTest.java          | 2 --
 maven-plugin/src/main/java/hudson/maven/MavenUtil.java              | 2 --
 .../src/main/java/hudson/maven/reporters/SurefireArchiver.java      | 1 -
 14 files changed, 27 deletions(-)

--- a/core/src/main/java/hudson/UDPBroadcastThread.java
+++ b/core/src/main/java/hudson/UDPBroadcastThread.java
@@ -23,7 +23,6 @@
  */
 package hudson;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.model.Hudson;
 import jenkins.model.Jenkins;
 import hudson.util.OneShotEvent;
@@ -69,7 +68,6 @@
         mcs = new MulticastSocket(PORT);
     }
 
-    @SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     @Override
     public void run() {
         try {
--- a/core/src/main/java/hudson/Util.java
+++ b/core/src/main/java/hudson/Util.java
@@ -26,7 +26,6 @@
 import com.sun.jna.Memory;
 import com.sun.jna.Native;
 import com.sun.jna.NativeLong;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.Proc.LocalProc;
 import hudson.model.TaskListener;
 import hudson.os.PosixAPI;
@@ -357,7 +356,6 @@
         return !fileInCanonicalParent.getCanonicalFile().equals( fileInCanonicalParent.getAbsoluteFile() );
     }
 
-    @SuppressWarnings("NP_BOOLEAN_RETURN_NULL")
     private static Boolean isSymlinkJava7(File file) throws IOException {
         try {
             Object path = File.class.getMethod("toPath").invoke(file);
--- a/core/src/main/java/hudson/WebAppMain.java
+++ b/core/src/main/java/hudson/WebAppMain.java
@@ -255,7 +255,6 @@
 	/**
      * Installs log handler to monitor all Hudson logs.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
     private void installLogger() {
         Jenkins.logRecords = handler.getView();
         Logger.getLogger("").addHandler(handler);
--- a/core/src/main/java/hudson/cli/GroovyshCommand.java
+++ b/core/src/main/java/hudson/cli/GroovyshCommand.java
@@ -87,7 +87,6 @@
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) {
                 assert(args.length == 1);
                 assert(args[0] instanceof Shell);
@@ -110,7 +109,6 @@
             private static final long serialVersionUID = 1L;
 
             @SuppressWarnings("unused")
-            @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS",justification="Closure invokes this via reflection")
             public Object doCall(Object[] args) throws ChannelClosedException {
                 if (args.length == 1 && args[0] instanceof ChannelClosedException) {
                     throw (ChannelClosedException)args[0];
--- a/core/src/main/java/hudson/logging/LogRecorderManager.java
+++ b/core/src/main/java/hudson/logging/LogRecorderManager.java
@@ -112,7 +112,6 @@
     /**
      * Configure the logging level.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE")
     public HttpResponse doConfigLogger(@QueryParameter String name, @QueryParameter String level) {
         Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);
         Level lv;
--- a/core/src/main/java/hudson/triggers/Trigger.java
+++ b/core/src/main/java/hudson/triggers/Trigger.java
@@ -63,7 +63,6 @@
 
 import antlr.ANTLRException;
 import javax.annotation.CheckForNull;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 
 /**
  * Triggers a {@link Build}.
@@ -280,7 +279,6 @@
      *
      * If plugins want to run periodic jobs, they should implement {@link PeriodicWork}.
      */
-    @SuppressWarnings("MS_SHOULD_BE_FINAL")
     public static @CheckForNull Timer timer;
 
     @Initializer(after=JOB_LOADED)
--- a/core/src/main/java/hudson/util/PluginServletFilter.java
+++ b/core/src/main/java/hudson/util/PluginServletFilter.java
@@ -58,7 +58,6 @@
     public PluginServletFilter() {
     }
 
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     public void init(FilterConfig filterConfig) throws ServletException {
     	PluginServletFilter.filterConfig = filterConfig;
     	synchronized (LIST)  {
--- a/core/src/main/java/hudson/util/XStream2.java
+++ b/core/src/main/java/hudson/util/XStream2.java
@@ -41,7 +41,6 @@
 import com.thoughtworks.xstream.io.HierarchicalStreamReader;
 import com.thoughtworks.xstream.io.HierarchicalStreamWriter;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.PluginManager;
 import hudson.PluginWrapper;
 import hudson.diagnosis.OldDataMonitor;
@@ -388,7 +387,6 @@
 
         private PluginManager pm;
 
-        @SuppressWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") // classOwnership checked for null so why does FB complain?
         @Override public String ownerOf(Class<?> clazz) {
             if (classOwnership != null) {
                 return classOwnership.ownerOf(clazz);
--- a/core/src/main/java/jenkins/model/Jenkins.java
+++ b/core/src/main/java/jenkins/model/Jenkins.java
@@ -731,10 +731,6 @@
      * @param pluginManager
      *      If non-null, use existing plugin manager.  create a new one.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings({
-        "SC_START_IN_CTOR", // bug in FindBugs. It flags UDPBroadcastThread.start() call but that's for another class
-        "ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD" // Trigger.timer
-    })
     protected Jenkins(File root, ServletContext context, PluginManager pluginManager) throws IOException, InterruptedException, ReactorException {
         long start = System.currentTimeMillis();
         
@@ -2647,7 +2643,6 @@
     /**
      * Called to shut down the system.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD")
     public void cleanUp() {
         for (ItemListener l : ItemListener.all())
             l.onBeforeShutdown();
@@ -3089,7 +3084,6 @@
     /**
      * For debugging. Expose URL to perform GC.
      */
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("DM_GC")
     public void doGc(StaplerResponse rsp) throws IOException {
         checkPermission(Jenkins.ADMINISTER);
         System.gc();
--- a/core/src/main/java/jenkins/util/ProgressiveRendering.java
+++ b/core/src/main/java/jenkins/util/ProgressiveRendering.java
@@ -24,7 +24,6 @@
 
 package jenkins.util;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.model.Computer;
 import java.util.concurrent.ExecutorService;
 import java.util.logging.Level;
--- a/core/src/test/java/hudson/slaves/ComputerLauncherTest.java
+++ b/core/src/test/java/hudson/slaves/ComputerLauncherTest.java
@@ -24,7 +24,6 @@
 
 package hudson.slaves;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -34,7 +33,6 @@
 import org.junit.Test;
 import static org.junit.Assert.*;
 
-@SuppressWarnings("DM_DEFAULT_ENCODING")
 public class ComputerLauncherTest {
 
     @Test public void jdk7() throws IOException {
--- a/core/src/test/java/hudson/tasks/junit/SuiteResultTest.java
+++ b/core/src/test/java/hudson/tasks/junit/SuiteResultTest.java
@@ -23,7 +23,6 @@
  */
 package hudson.tasks.junit;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import java.io.File;
 import java.util.List;
 import java.net.URISyntaxException;
@@ -178,7 +177,6 @@
         }
     }
 
-    @SuppressWarnings({"RV_RETURN_VALUE_IGNORED_BAD_PRACTICE", "DM_DEFAULT_ENCODING", "OS_OPEN_STREAM"})
     public void testSuiteStdioTrimmingSurefire() throws Exception {
         File data = File.createTempFile("TEST-", ".xml");
         try {
--- a/maven-plugin/src/main/java/hudson/maven/MavenUtil.java
+++ b/maven-plugin/src/main/java/hudson/maven/MavenUtil.java
@@ -23,7 +23,6 @@
  */
 package hudson.maven;
 
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
 import hudson.AbortException;
 import hudson.FilePath;
 import hudson.Util;
@@ -139,7 +138,6 @@
      * Creates a fresh {@link MavenEmbedder} instance.
      *
      */
-    @SuppressWarnings("RV_RETURN_VALUE_IGNORED_BAD_PRACTICE")
     public static MavenEmbedder createEmbedder(MavenEmbedderRequest mer) throws MavenEmbedderException, IOException {
         
         
--- a/maven-plugin/src/main/java/hudson/maven/reporters/SurefireArchiver.java
+++ b/maven-plugin/src/main/java/hudson/maven/reporters/SurefireArchiver.java
@@ -199,7 +199,6 @@
         return true;
     }
     
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD", justification="It's okay to write to static fields here, as each Maven build is started in its own VM")
     private void markBuildAsSuccess(Throwable mojoError, MavenBuildInformation buildInfo) {
         if(mojoError == null // in the success case we don't get any exception in Maven 3.0.2+; Maven < 3.0.2 returns no exception anyway
            || mojoError instanceof MojoFailureException) {
