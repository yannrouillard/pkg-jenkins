Description: Ignore the dependency on bytecode-compatibility-transformer (not yet in Debian)
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: not-needed
--- a/core/src/main/java/hudson/model/AbstractProject.java
+++ b/core/src/main/java/hudson/model/AbstractProject.java
@@ -118,7 +118,6 @@
 import jenkins.util.TimeDuration;
 import net.sf.json.JSONObject;
 import org.acegisecurity.Authentication;
-import org.jenkinsci.bytecode.AdaptField;
 import org.kohsuke.accmod.Restricted;
 import org.kohsuke.accmod.restrictions.NoExternalUse;
 import org.kohsuke.args4j.Argument;
@@ -237,10 +236,9 @@
     /**
      * List of all {@link Trigger}s for this project.
      */
-    @AdaptField(was=List.class)
-    protected volatile DescribableList<Trigger<?>,TriggerDescriptor> triggers = new DescribableList<Trigger<?>,TriggerDescriptor>(this);
-    private static final AtomicReferenceFieldUpdater<AbstractProject,DescribableList> triggersUpdater
-            = AtomicReferenceFieldUpdater.newUpdater(AbstractProject.class,DescribableList.class,"triggers");
+    protected volatile List<Trigger<?>> triggers = new DescribableList<Trigger<?>,TriggerDescriptor>(this);
+    private static final AtomicReferenceFieldUpdater<AbstractProject,List> triggersUpdater
+            = AtomicReferenceFieldUpdater.newUpdater(AbstractProject.class,List.class,"triggers");
 
     /**
      * {@link Action}s contributed from subsidiary objects associated with
@@ -338,7 +336,7 @@
         if (triggers == null) {
             triggersUpdater.compareAndSet(this,null,new DescribableList<Trigger<?>,TriggerDescriptor>(this));
         }
-        return triggers;
+        return (DescribableList<Trigger<?>,TriggerDescriptor>) triggers;
     }
 
     @Override
@@ -1832,7 +1830,7 @@
 
         for (Trigger t : triggers())
             t.stop();
-        triggers.replaceBy(buildDescribable(req, Trigger.for_(this)));
+        ((DescribableList<Trigger<?>,TriggerDescriptor>) triggers).replaceBy(buildDescribable(req, Trigger.for_(this)));
         for (Trigger t : triggers())
             t.start(this,true);
     }
--- a/core/src/main/java/hudson/PluginManager.java
+++ b/core/src/main/java/hudson/PluginManager.java
@@ -58,7 +58,6 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.logging.LogFactory;
-import org.jenkinsci.bytecode.Transformer;
 import org.jvnet.hudson.reactor.Executable;
 import org.jvnet.hudson.reactor.Reactor;
 import org.jvnet.hudson.reactor.ReactorException;
@@ -154,8 +153,6 @@
     // and load plugin-contributed classes.
     public final ClassLoader uberClassLoader = new UberClassLoader();
 
-    private final Transformer compatibilityTransformer = new Transformer();
-
     /**
      * Once plugin is uploaded, this flag becomes true.
      * This is used to report a message that Jenkins needs to be restarted
@@ -184,17 +181,6 @@
             rootDir.mkdirs();
         
         strategy = createPluginStrategy();
-
-        // load up rules for the core first
-        try {
-            compatibilityTransformer.loadRules(getClass().getClassLoader());
-        } catch (IOException e) {
-            LOGGER.log(Level.WARNING, "Failed to load compatibility rewrite rules",e);
-        }
-    }
-
-    public Transformer getCompatibilityTransformer() {
-        return compatibilityTransformer;
     }
 
     public Api getApi() {
--- a/core/src/main/java/hudson/ClassicPluginStrategy.java
+++ b/core/src/main/java/hudson/ClassicPluginStrategy.java
@@ -750,8 +750,6 @@
 
         @Override
         protected Class defineClassFromData(File container, byte[] classData, String classname) throws IOException {
-            if (!DISABLE_TRANSFORMER)
-                classData = pluginManager.getCompatibilityTransformer().transform(classname, classData);
             return super.defineClassFromData(container, classData, classname);
         }
     }
