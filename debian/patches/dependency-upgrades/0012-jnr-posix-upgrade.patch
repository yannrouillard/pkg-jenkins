From: Debian Java Maintainers <pkg-java-maintainers@lists.alioth.debian.org>
Date: Sun, 11 Aug 2013 10:41:39 +0100
Subject: jnr-posix-upgrade

---
 core/pom.xml                                     | 5 +++++
 core/src/main/java/hudson/os/PosixAPI.java       | 7 +++----
 core/src/main/java/hudson/os/PosixException.java | 8 ++++----
 3 files changed, 12 insertions(+), 8 deletions(-)

--- a/core/pom.xml
+++ b/core/pom.xml
@@ -123,6 +123,11 @@
       <version>3.0.0</version>
     </dependency>
     <dependency>
+      <groupId>org.jruby.extras</groupId>
+      <artifactId>jffi</artifactId>
+      <version>0.6.5</version>
+    </dependency>
+    <dependency>
       <groupId>org.kohsuke</groupId>
       <artifactId>trilead-putty-extension</artifactId>
       <version>1.2</version>
--- a/core/src/main/java/hudson/os/PosixAPI.java
+++ b/core/src/main/java/hudson/os/PosixAPI.java
@@ -5,10 +5,10 @@
 import java.io.PrintStream;
 import java.util.Map;
 import java.util.logging.Logger;
-import jnr.constants.platform.Errno;
-import jnr.posix.POSIX;
-import jnr.posix.POSIXFactory;
-import jnr.posix.util.DefaultPOSIXHandler;
+import org.jruby.ext.posix.POSIX;
+import org.jruby.ext.posix.POSIXFactory;
+import org.jruby.ext.posix.POSIXHandler;
+import com.kenai.constantine.platform.Errno;
 
 /**
  * POSIX API wrapper.
@@ -16,59 +16,28 @@
  * @author Kohsuke Kawaguchi
  */
 public class PosixAPI {
-
-    private static POSIX posix;
-    
-    /**
-     * Load the JNR implementation of the POSIX APIs for the current platform.
-     * Runtime exceptions will be of type {@link PosixException}.
-     * @return some implementation (even on Windows or unsupported Unix)
-     * @since 1.518
-     */
-    public static synchronized POSIX jnr() {
-        if (posix == null) {
-            posix = POSIXFactory.getPOSIX(new DefaultPOSIXHandler() {
-                @Override public void error(Errno error, String extraData) {
-                    throw new PosixException("native error " + error.description() + " " + extraData, convert(error));
-                }
-                @Override public void error(Errno error, String methodName, String extraData) {
-                    throw new PosixException("native error calling " + methodName + ": " + error.description() + " " + extraData, convert(error));
-                }
-                private org.jruby.ext.posix.POSIX.ERRORS convert(Errno error) {
-                    try {
-                        return org.jruby.ext.posix.POSIX.ERRORS.valueOf(error.name());
-                    } catch (IllegalArgumentException x) {
-                        return org.jruby.ext.posix.POSIX.ERRORS.EIO; // PosixException.message has real error anyway
-                    }
-                }
-            }, true);
-        }
+    public static POSIX jnr() {
         return posix;
     }
 
     /**
-     * @deprecated use {@link #jnr} and {@link POSIX#isNative}
+     * @deprecated as of 1.448
+     *      Use {@link #supportsNative()}.
      */
-    @Deprecated
     public boolean isNative() {
         return supportsNative();
     }
 
     /**
-     * @deprecated use {@link #jnr} and {@link POSIX#isNative}
+     * Determine if the jna-posix library could not provide native support, and
+     * used a fallback java implementation which does not support many operations.
      */
-    @Deprecated
     public static boolean supportsNative() {
-        return !(jnaPosix instanceof org.jruby.ext.posix.JavaPOSIX);
+        return posix.isNative();
     }
-
-    private static org.jruby.ext.posix.POSIX jnaPosix;
-    /** @deprecated Use {@link #jnr} instead. */
-    @Deprecated
-    public static synchronized org.jruby.ext.posix.POSIX get() {
-        if (jnaPosix == null) {
-            jnaPosix = org.jruby.ext.posix.POSIXFactory.getPOSIX(new org.jruby.ext.posix.POSIXHandler() {
-        public void error(org.jruby.ext.posix.POSIX.ERRORS errors, String s) {
+    
+    private static final POSIX posix = POSIXFactory.getPOSIX(new POSIXHandler() {
+        public void error(Errno errors, String s) {
             throw new PosixException(s,errors);
         }
 
@@ -116,9 +85,6 @@
             return System.err;
         }
     }, true);
-        }
-        return jnaPosix;
-    }
 
     private static final Logger LOGGER = Logger.getLogger(PosixAPI.class.getName());
 }
--- a/core/src/main/java/hudson/os/PosixException.java
+++ b/core/src/main/java/hudson/os/PosixException.java
@@ -1,6 +1,6 @@
 package hudson.os;
 
-import org.jruby.ext.posix.POSIX.ERRORS;
+import com.kenai.constantine.platform.Errno;
 
 /**
  * Indicates an error during POSIX API call.
@@ -8,16 +8,16 @@
  * @author Kohsuke Kawaguchi
  */
 public class PosixException extends RuntimeException {
-    private final ERRORS errors;
+    private final Errno errors;
 
-    public PosixException(String message, ERRORS errors) {
+    public PosixException(String message, Errno errors) {
         super(message);
         this.errors = errors;
     }
 
     /** @deprecated Leaks reference to deprecated jna-posix API. */
     @Deprecated
-    public ERRORS getErrorCode() {
+    public Errno getErrorCode() {
         return errors;
     }
 
--- a/core/src/main/java/hudson/util/jna/GNUCLibrary.java
+++ b/core/src/main/java/hudson/util/jna/GNUCLibrary.java
@@ -31,7 +31,7 @@
 import com.sun.jna.NativeLong;
 import com.sun.jna.ptr.IntByReference;
 import hudson.os.PosixAPI;
-import jnr.posix.POSIX;
+import org.jruby.ext.posix.POSIX;
 import org.jvnet.libpam.impl.CLibrary.passwd;
 
 /**
--- a/core/src/main/java/hudson/Util.java
+++ b/core/src/main/java/hudson/Util.java
@@ -41,8 +41,8 @@
 import org.apache.tools.ant.taskdefs.Chmod;
 import org.apache.tools.ant.taskdefs.Copy;
 import org.apache.tools.ant.types.FileSet;
-import jnr.posix.FileStat;
-import jnr.posix.POSIX;
+import org.jruby.ext.posix.FileStat;
+import org.jruby.ext.posix.POSIX;
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 import org.kohsuke.stapler.Stapler;
 
